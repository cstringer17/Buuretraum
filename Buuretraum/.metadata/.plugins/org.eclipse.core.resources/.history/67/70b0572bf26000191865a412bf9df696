package com.buuretraum.main;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;

import com.buuretraum.database.query;
import com.buuretraum.frames.*;

import com.buuretram.sprites.*;

public class Game extends Canvas implements Runnable {

	public static final int WIDTH = 1024, HEIGHT = WIDTH / 12 * 9;
	private Thread thread;
	private boolean running = false;
	private String currentUser;
	
	private boolean initialize;
	
	private query q;
	
	private Farm[] farms;

	

	public Game(String currentUser) {
		this.currentUser = currentUser;
		new Window(WIDTH, HEIGHT, "Buuretram  -  " + currentUser, this);
	}

	public synchronized void start() {
		thread = new Thread(this);
		thread.start();
		initialize = true;
		running = true;
		q = new query();
	

	}

	public synchronized void stop() {
		try {
			thread.join();
			running = false;
		} catch (Exception e) {
			e.printStackTrace();
		}
		;

	}

	public void run() {
		/**
		 * Game Loop - NOT MY OWN CODE! 
		 */
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int frames = 0;
		while (running) {
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while (delta >= 1) {
				tick();
				delta--;
			}
			if (running)
				render();
			frames++;

			if (System.currentTimeMillis() - timer > 1000) {
				timer += 1000;
				System.out.println("FPS: " + frames + "   i = " + initialize);
				frames = 0;
			}
		}
		stop();
	}

	private void tick() {
		if(initialize==true) {
			loaddata(currentUser);
			initialize=false;
		}
		
	}

	

	private void render(){
		BufferStrategy bs = this.getBufferStrategy();
		if(bs == null) {
			this.createBufferStrategy(3);
			return;
		}
		
		Graphics g = bs.getDrawGraphics();
		
		g.setColor(Color.green);
		g.fillRect(0, 0, WIDTH, HEIGHT);
		
		
		
		g.dispose();
		bs.show();
		
	}
	
	private void loaddata(String currentUser2) {
		//get all farms that belong to current user
		System.out.println("loading...");
		
		String s = "SELECT * from farm where Player_idPlayer='" + currentUser2 + "'"; ;

		String reply = q.queryDB(s);
	
		System.out.println("Reply:  " + reply);
		
		String[] Farm = reply.split("$");
		
		for (String sx : Farm) {
			System.out.println(sx);
		}
		
		
		
	}

	
}
